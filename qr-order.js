// QR Order System - Advanced Implementation
let currentLanguage = 'ru';
let selectedAgeGroup = null;
let currentCategory = 'kids';
let cart = [];
let tableNumber = 1;
let orderStatus = 'ready'; // ready, ordering, cooking, ready-to-serve

// Enhanced Menu Data with Age Recommendations and Nutritional Info
const qrMenuData = {
    kids: [
        {
            id: 'kids_1',
            name: { ru: "–î–µ—Ç—Å–∫–∞—è –ø–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", kz: "–ë–∞–ª–∞–ª–∞—Ä –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –ø–∏—Ü—Ü–∞—Å—ã" },
            description: { ru: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º –∏ –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π", kz: "“ö—ã–∑–∞–Ω–∞“õ —Å–æ—É—Å—ã –º–µ–Ω –º–æ—Ü–∞—Ä–µ–ª–ª–∞ —Å—ã—Ä—ã –±–∞—Ä –∫–ª–∞—Å—Å–∏–∫–∞–ª—ã“õ –ø–∏—Ü—Ü–∞" },
            price: 2500,
            emoji: "üçï",
            ageGroups: ["3-6", "7-12"],
            allergens: ["gluten", "dairy"],
            prepTime: 15,
            popularity: 95
        },
        {
            id: 'kids_2',
            name: { ru: "–ö—É—Ä–∏–Ω—ã–µ –Ω–∞–≥–≥–µ—Ç—Å—ã", kz: "–¢–∞—É—ã“õ –Ω–∞–≥–≥–µ—Ç—Å—Ç–∞—Ä—ã" },
            description: { ru: "–•—Ä—É—Å—Ç—è—â–∏–µ –∫—É—Ä–∏–Ω—ã–µ –∫—É—Å–æ—á–∫–∏ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º —Ñ—Ä–∏", kz: "–ö–∞—Ä—Ç–æ–ø —Ñ—Ä–∏ –∫”©–∫”©–Ω—ñ—Å—Ç–µ—Ä—ñ–º–µ–Ω —Ö—Ä—É—Å—Ç—è—â–∏–µ —Ç–∞—É—ã“õ –∫–µ—Å–µ–∫—Ç–µ—Ä—ñ" },
            price: 2200,
            emoji: "üçó",
            ageGroups: ["3-6", "7-12", "13+"],
            allergens: ["gluten"],
            prepTime: 12,
            popularity: 88
        },
        {
            id: 'kids_3',
            name: { ru: "–î–µ—Ç—Å–∫–∞—è –ø–∞—Å—Ç–∞", kz: "–ë–∞–ª–∞–ª–∞—Ä –ø–∞—Å—Ç–∞—Å—ã" },
            description: { ru: "–ü–∞—Å—Ç–∞ —Å –Ω–µ–∂–Ω—ã–º —Å–ª–∏–≤–æ—á–Ω—ã–º —Å–æ—É—Å–æ–º", kz: "–ñ“±–º—Å–∞“õ –∫—Ä–µ–º–¥—ñ —Å–æ—É—Å–ø–µ–Ω –ø–∞—Å—Ç–∞" },
            price: 1800,
            emoji: "üçù",
            ageGroups: ["0-2", "3-6", "7-12"],
            allergens: ["gluten", "dairy"],
            prepTime: 10,
            popularity: 82
        },
        {
            id: 'kids_4',
            name: { ru: "–ú–æ–ª–æ—á–Ω–∞—è –∫–∞—à–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏", kz: "–ñ–µ–º—ñ—Å—Ç–µ—Ä–º–µ–Ω —Å“Ø—Ç –±–æ—Ç“õ–∞—Å—ã" },
            description: { ru: "–ü–æ–ª–µ–∑–Ω–∞—è –æ–≤—Å—è–Ω–∞—è –∫–∞—à–∞ —Å –±–∞–Ω–∞–Ω–æ–º –∏ —è–≥–æ–¥–∞–º–∏", kz: "–ë–∞–Ω–∞–Ω –º–µ–Ω –∂–∏–¥–µ–∫—Ç–µ—Ä–º–µ–Ω –ø–∞–π–¥–∞–ª—ã —Å“±–ª—ã –±–æ—Ç“õ–∞—Å—ã" },
            price: 1200,
            emoji: "ü•£",
            ageGroups: ["0-2", "3-6"],
            allergens: ["dairy"],
            prepTime: 8,
            popularity: 75
        }
    ],
    drinks: [
        {
            id: 'drink_1',
            name: { ru: "–î–µ—Ç—Å–∫–∏–π –º–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å", kz: "–ë–∞–ª–∞–ª–∞—Ä —Å“Ø—Ç –∫–æ–∫—Ç–µ–π–ª—ñ" },
            description: { ru: "–í–∞–Ω–∏–ª—å–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å —Å –≤–∑–±–∏—Ç—ã–º–∏ —Å–ª–∏–≤–∫–∞–º–∏", kz: "“ö–∞–º—ã—Ä–º–∞ –±–∞—Ä –≤–∞–Ω–∏–ª—å–¥—ñ –∫–æ–∫—Ç–µ–π–ª—å" },
            price: 1500,
            emoji: "ü•§",
            ageGroups: ["3-6", "7-12", "13+"],
            allergens: ["dairy"],
            prepTime: 5,
            popularity: 90
        },
        {
            id: 'drink_2',
            name: { ru: "–°–≤–µ–∂–µ–≤—ã–∂–∞—Ç—ã–π –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫", kz: "–ñ–∞“£–∞–¥–∞–Ω —Å—ã“ì—ã–ª“ì–∞–Ω –∞–ø–µ–ª—å—Å–∏–Ω —à—ã—Ä—ã–Ω—ã" },
            description: { ru: "100% –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–æ–∫ –±–µ–∑ –¥–æ–±–∞–≤–æ–∫", kz: "100% —Ç–∞–±–∏“ì–∏ “õ–æ—Å–ø–∞—Å—ã–∑ —à—ã—Ä—ã–Ω" },
            price: 1200,
            emoji: "üçä",
            ageGroups: ["0-2", "3-6", "7-12", "13+"],
            allergens: [],
            prepTime: 3,
            popularity: 85
        },
        {
            id: 'drink_3',
            name: { ru: "–î–µ—Ç—Å–∫–∏–π —Ç—Ä–∞–≤—è–Ω–æ–π —á–∞–π", kz: "–ë–∞–ª–∞–ª–∞—Ä —à”©–ø —à–∞–π—ã" },
            description: { ru: "–£—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π —á–∞–π —Å —Ä–æ–º–∞—à–∫–æ–π –∏ –º–µ–¥–æ–º", kz: "–†–æ–º–∞—à–∫–∞ –º–µ–Ω –±–∞–ª–º–µ–Ω —Ç—ã–Ω—ã—à—Ç–∞–Ω–¥—ã—Ä–∞—Ç—ã–Ω —à–∞–π" },
            price: 800,
            emoji: "üçµ",
            ageGroups: ["0-2", "3-6", "7-12"],
            allergens: [],
            prepTime: 5,
            popularity: 70
        }
    ],
    main: [
        {
            id: 'main_1',
            name: { ru: "–°—Ç–µ–π–∫ –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã", kz: "–°–∏—ã—Ä –µ—Ç—ñ–Ω–µ–Ω —Å—Ç–µ–π–∫" },
            description: { ru: "–°–æ—á–Ω—ã–π —Å—Ç–µ–π–∫ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–∂–∞—Ä–∫–∏ —Å –≥–∞—Ä–Ω–∏—Ä–æ–º", kz: "–ì–∞—Ä–Ω–∏—Ä–º–µ–Ω –æ—Ä—Ç–∞—à–∞ –ø—ñ—Å–∫–µ–Ω –¥”ô–º–¥—ñ —Å—Ç–µ–π–∫" },
            price: 5500,
            emoji: "ü•©",
            ageGroups: ["13+"],
            allergens: [],
            prepTime: 25,
            popularity: 78
        },
        {
            id: 'main_2',
            name: { ru: "–ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Å–µ–º–≥–∞", kz: "–ü—ñ—Å—ñ—Ä—ñ–ª–≥–µ–Ω —Å–µ–º–≥–∞" },
            description: { ru: "–°–µ–º–≥–∞ —Å –ª–∏–º–æ–Ω–æ–º –∏ —Ç—Ä–∞–≤–∞–º–∏", kz: "–õ–∏–º–æ–Ω –º–µ–Ω —à”©–ø–ø–µ–Ω —Å–µ–º–≥–∞" },
            price: 4800,
            emoji: "üêü",
            ageGroups: ["7-12", "13+"],
            allergens: ["fish"],
            prepTime: 20,
            popularity: 72
        },
        {
            id: 'main_3',
            name: { ru: "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –≥—Ä–∏–ª—å", kz: "–ì—Ä–∏–ª—å —Ç–∞—É—ã“õ –∫”©–∫—ñ—Ä–µ–≥—ñ" },
            description: { ru: "–ù–µ–∂–Ω–∞—è –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –æ–≤–æ—â–∞–º–∏", kz: "–ö”©–∫”©–Ω—ñ—Å—Ç–µ—Ä–º–µ–Ω –∂“±–º—Å–∞“õ —Ç–∞—É—ã“õ –∫”©–∫—ñ—Ä–µ–≥—ñ" },
            price: 3200,
            emoji: "üçó",
            ageGroups: ["7-12", "13+"],
            allergens: [],
            prepTime: 18,
            popularity: 80
        }
    ],
    desserts: [
        {
            id: 'dessert_1',
            name: { ru: "–î–µ—Ç—Å–∫–∏–π —Ç–æ—Ä—Ç", kz: "–ë–∞–ª–∞–ª–∞—Ä —Ç–æ—Ä—Ç—ã—Å—ã" },
            description: { ru: "–í–æ–∑–¥—É—à–Ω—ã–π –±–∏—Å–∫–≤–∏—Ç —Å —Ñ—Ä—É–∫—Ç–∞–º–∏", kz: "–ñ–µ–º—ñ—Å—Ç–µ—Ä–º–µ–Ω –∞—É–∞–ª—ã –±–∏—Å–∫–≤–∏—Ç" },
            price: 2000,
            emoji: "üéÇ",
            ageGroups: ["3-6", "7-12", "13+"],
            allergens: ["gluten", "dairy", "eggs"],
            prepTime: 0,
            popularity: 92
        },
        {
            id: 'dessert_2',
            name: { ru: "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ", kz: "–ë–∞–ª–º“±–∑–¥–∞“õ" },
            description: { ru: "3 —à–∞—Ä–∏–∫–∞ –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ —Å —Ç–æ–ø–ø–∏–Ω–≥–∞–º–∏", kz: "“ö–æ—Å—ã–º—à–∞–ª–∞—Ä–º–µ–Ω 3 –±–∞–ª–º“±–∑–¥–∞“õ —à–∞—Ä—ã" },
            price: 1500,
            emoji: "üç¶",
            ageGroups: ["0-2", "3-6", "7-12", "13+"],
            allergens: ["dairy"],
            prepTime: 2,
            popularity: 95
        },
        {
            id: 'dessert_3',
            name: { ru: "–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–∞–ª–∞—Ç", kz: "–ñ–µ–º—ñ—Å —Å–∞–ª–∞—Ç—ã" },
            description: { ru: "–°–≤–µ–∂–∏–µ —Å–µ–∑–æ–Ω–Ω—ã–µ —Ñ—Ä—É–∫—Ç—ã", kz: "–ñ–∞“£–∞ –º–∞—É—Å—ã–º–¥—ã“õ –∂–µ–º—ñ—Å—Ç–µ—Ä" },
            price: 1200,
            emoji: "ü•ó",
            ageGroups: ["0-2", "3-6", "7-12", "13+"],
            allergens: [],
            prepTime: 5,
            popularity: 68
        }
    ]
};

// Order simulation data
const orderStatuses = {
    ru: {
        'ready': '–ì–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑',
        'ordering': '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...',
        'cooking': '–ì–æ—Ç–æ–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑',
        'ready-to-serve': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!'
    },
    kz: {
        'ready': '–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã “õ–∞–±—ã–ª–¥–∞—É“ì–∞ –¥–∞–π—ã–Ω',
        'ordering': '–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä”ô—Å—ñ–º–¥–µ—É...',
        'cooking': '–¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑–¥—ã –¥–∞–π—ã–Ω–¥–∞–ø –∂–∞—Ç—ã—Ä–º—ã–∑',
        'ready-to-serve': '–¢–∞–ø—Å—ã—Ä—ã—Å –¥–∞–π—ã–Ω!'
    }
};

// Initialize QR Order System
document.addEventListener('DOMContentLoaded', function() {
    // Get table number from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    tableNumber = urlParams.get('table') || 1;
    document.getElementById('tableNumber').textContent = tableNumber;
    
    initializeQROrder();
    loadMenuCategory('kids');
    updateLanguage();
});

function initializeQROrder() {
    // Simulate connection to order system
    updateOrderStatus('ready');
    
    // Load saved cart from localStorage
    const savedCart = localStorage.getItem(`cart_table_${tableNumber}`);
    if (savedCart) {
        cart = JSON.parse(savedCart);
        updateCartDisplay();
    }
    
    // Check for ongoing orders
    checkOrderStatus();
}

function showAgeSelector() {
    document.getElementById('ageSelectorModal').style.display = 'block';
}

function closeAgeSelector() {
    document.getElementById('ageSelectorModal').style.display = 'none';
    if (selectedAgeGroup) {
        showPersonalRecommendations();
    }
}

function selectAgeGroup(ageGroup) {
    selectedAgeGroup = ageGroup;
    
    // Update UI
    document.querySelectorAll('.age-option').forEach(option => {
        option.classList.remove('selected');
    });
    document.querySelector(`[data-age="${ageGroup}"]`).classList.add('selected');
    
    // Save preference
    localStorage.setItem(`agePreference_table_${tableNumber}`, ageGroup);
    
    showNotification('success', 
        currentLanguage === 'ru' ? '–í–æ–∑—Ä–∞—Å—Ç –≤—ã–±—Ä–∞–Ω!' : '–ñ–∞—Å —Ç–∞“£–¥–∞–ª–¥—ã!',
        currentLanguage === 'ru' ? 
        `–¢–µ–ø–µ—Ä—å –º—ã –ø–æ–∫–∞–∂–µ–º –ª—É—á—à–∏–µ –±–ª—é–¥–∞ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ ${ageGroup}` :
        `–ï–Ω–¥—ñ –±—ñ–∑ ${ageGroup} –∂–∞—Å—ã–Ω–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω –µ“£ –∂–∞“õ—Å—ã —Ç–∞“ì–∞–º–¥–∞—Ä–¥—ã –∫”©—Ä—Å–µ—Ç–µ–º—ñ–∑`
    );
}

function showPersonalRecommendations() {
    if (!selectedAgeGroup) return;
    
    const recommendationsSection = document.getElementById('personalRecommendations');
    const recommendedItems = document.getElementById('recommendedItems');
    
    // Get recommendations based on age and popularity
    const allItems = Object.values(qrMenuData).flat();
    const recommendations = allItems
        .filter(item => item.ageGroups.includes(selectedAgeGroup))
        .sort((a, b) => b.popularity - a.popularity)
        .slice(0, 4);
    
    recommendedItems.innerHTML = recommendations.map(item => `
        <div class="menu-item-card recommended-item" data-item-id="${item.id}">
            <div class="menu-item-image">
                ${item.emoji}
                <div class="recommended-badge">‚≠ê ${currentLanguage === 'ru' ? '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º' : '“∞—Å—ã–Ω–∞–º—ã–∑'}</div>
            </div>
            <div class="menu-item-content">
                <div class="menu-item-name">${item.name[currentLanguage]}</div>
                <div class="menu-item-description">${item.description[currentLanguage]}</div>
                <div class="menu-item-footer">
                    <div class="menu-item-price">${item.price.toLocaleString()}‚Ç∏</div>
                    <button class="add-to-cart-btn" onclick="addToCart('${item.id}')">
                        <i class="fas fa-plus"></i>
                        <span data-ru="–í –∫–æ—Ä–∑–∏–Ω—É" data-kz="–°–µ–±–µ—Ç–∫–µ">–í –∫–æ—Ä–∑–∏–Ω—É</span>
                    </button>
                </div>
            </div>
        </div>
    `).join('');
    
    recommendationsSection.style.display = 'block';
    updateLanguage();
}

function selectCategory(category) {
    currentCategory = category;
    
    // Update active tab
    document.querySelectorAll('.category-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelector(`[data-category="${category}"]`).classList.add('active');
    
    loadMenuCategory(category);
}

function loadMenuCategory(category) {
    const menuItems = document.getElementById('menuItems');
    const items = qrMenuData[category] || [];
    
    menuItems.innerHTML = items.map(item => {
        const isRecommended = selectedAgeGroup && item.ageGroups.includes(selectedAgeGroup);
        
        return `
            <div class="menu-item-card ${isRecommended ? 'recommended-item' : ''}" data-item-id="${item.id}">
                <div class="menu-item-image">
                    ${item.emoji}
                    ${isRecommended ? `<div class="recommended-badge">‚≠ê ${currentLanguage === 'ru' ? '–î–ª—è –≤–∞—Å' : '–°—ñ–∑–≥–µ'}</div>` : ''}
                </div>
                <div class="menu-item-content">
                    <div class="menu-item-name">${item.name[currentLanguage]}</div>
                    <div class="menu-item-description">${item.description[currentLanguage]}</div>
                    <div class="menu-item-details">
                        <small style="color: var(--text-light);">
                            <i class="fas fa-clock"></i> ${item.prepTime} ${currentLanguage === 'ru' ? '–º–∏–Ω' : '–º–∏–Ω'} | 
                            <i class="fas fa-thumbs-up"></i> ${item.popularity}%
                            ${item.allergens.length > 0 ? ` | <i class="fas fa-exclamation-triangle"></i> ${item.allergens.join(', ')}` : ''}
                        </small>
                    </div>
                    <div class="menu-item-footer">
                        <div class="menu-item-price">${item.price.toLocaleString()}‚Ç∏</div>
                        <button class="add-to-cart-btn" onclick="addToCart('${item.id}')">
                            <i class="fas fa-plus"></i>
                            <span data-ru="–í –∫–æ—Ä–∑–∏–Ω—É" data-kz="–°–µ–±–µ—Ç–∫–µ">–í –∫–æ—Ä–∑–∏–Ω—É</span>
                        </button>
                    </div>
                </div>
            </div>
        `;
    }).join('');
    
    // Add staggered animation
    document.querySelectorAll('.menu-item-card').forEach((card, index) => {
        card.style.animationDelay = `${index * 0.1}s`;
    });
    
    updateLanguage();
}

function addToCart(itemId) {
    const allItems = Object.values(qrMenuData).flat();
    const item = allItems.find(i => i.id === itemId);
    
    if (!item) return;
    
    // Check if item already in cart
    const existingItem = cart.find(cartItem => cartItem.id === itemId);
    
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cart.push({
            ...item,
            quantity: 1
        });
    }
    
    // Save cart to localStorage
    localStorage.setItem(`cart_table_${tableNumber}`, JSON.stringify(cart));
    
    // Update UI
    updateCartDisplay();
    
    // Show feedback
    const button = event.target.closest('.add-to-cart-btn');
    button.style.transform = 'scale(1.2)';
    button.innerHTML = '<i class="fas fa-check"></i> –î–æ–±–∞–≤–ª–µ–Ω–æ!';
    setTimeout(() => {
        button.style.transform = '';
        button.innerHTML = `<i class="fas fa-plus"></i> <span data-ru="–í –∫–æ—Ä–∑–∏–Ω—É" data-kz="–°–µ–±–µ—Ç–∫–µ">–í –∫–æ—Ä–∑–∏–Ω—É</span>`;
        updateLanguage();
    }, 1000);
    
    showNotification('success',
        currentLanguage === 'ru' ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!' : '–°–µ–±–µ—Ç–∫–µ “õ–æ—Å—ã–ª–¥—ã!',
        item.name[currentLanguage]
    );
}

function updateCartDisplay() {
    const cartCount = document.getElementById('cartCount');
    const cartTotal = document.getElementById('cartTotal');
    
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    const totalPrice = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    cartCount.textContent = totalItems;
    cartTotal.textContent = `${totalPrice.toLocaleString()}‚Ç∏`;
    
    // Update cart modal if open
    if (document.getElementById('cartModal').style.display === 'block') {
        loadCartItems();
    }
}

function openCart() {
    document.getElementById('cartModal').style.display = 'block';
    loadCartItems();
}

function closeCart() {
    document.getElementById('cartModal').style.display = 'none';
}

function loadCartItems() {
    const cartItems = document.getElementById('cartItems');
    const finalTotal = document.getElementById('finalTotal');
    
    if (cart.length === 0) {
        cartItems.innerHTML = `
            <div class="empty-cart">
                <i class="fas fa-shopping-cart"></i>
                <p data-ru="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞" data-kz="–°–µ–±–µ—Ç –±–æ—Å">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
            </div>
        `;
        finalTotal.textContent = '0‚Ç∏';
        return;
    }
    
    cartItems.innerHTML = cart.map(item => `
        <div class="cart-item">
            <div class="cart-item-image">${item.emoji}</div>
            <div class="cart-item-info">
                <div class="cart-item-name">${item.name[currentLanguage]}</div>
                <div class="cart-item-price">${item.price.toLocaleString()}‚Ç∏</div>
            </div>
            <div class="cart-item-controls">
                <button class="quantity-btn" onclick="updateQuantity('${item.id}', -1)">-</button>
                <span class="quantity-display">${item.quantity}</span>
                <button class="quantity-btn" onclick="updateQuantity('${item.id}', 1)">+</button>
            </div>
        </div>
    `).join('');
    
    const totalPrice = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    finalTotal.textContent = `${totalPrice.toLocaleString()}‚Ç∏`;
    
    updateLanguage();
}

function updateQuantity(itemId, change) {
    const item = cart.find(cartItem => cartItem.id === itemId);
    if (!item) return;
    
    item.quantity += change;
    
    if (item.quantity <= 0) {
        cart = cart.filter(cartItem => cartItem.id !== itemId);
    }
    
    // Save updated cart
    localStorage.setItem(`cart_table_${tableNumber}`, JSON.stringify(cart));
    
    // Update displays
    updateCartDisplay();
    loadCartItems();
}

function placeOrder() {
    if (cart.length === 0) {
        showNotification('warning',
            currentLanguage === 'ru' ? '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' : '–°–µ–±–µ—Ç –±–æ—Å',
            currentLanguage === 'ru' ? '–î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞' : '–¢–∞–ø—Å—ã—Ä—ã—Å –±–µ—Ä—É –∞–ª–¥—ã–Ω–¥–∞ —Ç–∞“ì–∞–º “õ–æ—Å—ã“£—ã–∑'
        );
        return;
    }
    
    // Calculate total prep time
    const totalPrepTime = Math.max(...cart.map(item => item.prepTime)) + 5; // +5 minutes buffer
    
    // Create order
    const order = {
        tableNumber: tableNumber,
        items: cart,
        totalPrice: cart.reduce((sum, item) => sum + (item.price * item.quantity), 0),
        timestamp: new Date().toISOString(),
        estimatedTime: totalPrepTime,
        status: 'cooking'
    };
    
    // Save order
    localStorage.setItem(`order_table_${tableNumber}`, JSON.stringify(order));
    
    // Clear cart
    cart = [];
    localStorage.removeItem(`cart_table_${tableNumber}`);
    
    // Update UI
    updateCartDisplay();
    closeCart();
    updateOrderStatus('cooking');
    
    // Show order confirmation
    showOrderNotification('success',
        currentLanguage === 'ru' ? '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!' : '–¢–∞–ø—Å—ã—Ä—ã—Å “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã!',
        currentLanguage === 'ru' ? 
        `–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è. –û–∂–∏–¥–∞–π—Ç–µ ~${totalPrepTime} –º–∏–Ω—É—Ç` :
        `–°—ñ–∑–¥—ñ“£ —Ç–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ –¥–∞–π—ã–Ω–¥–∞–ª—É–¥–∞. ~${totalPrepTime} –º–∏–Ω—É—Ç –∫“Ø—Ç—ñ“£—ñ–∑`
    );
    
    // Simulate cooking process
    simulateOrderProgress(totalPrepTime);
}

function simulateOrderProgress(totalTime) {
    // Show cooking notification after 2 seconds
    setTimeout(() => {
        showOrderNotification('cooking',
            currentLanguage === 'ru' ? '–ì–æ—Ç–æ–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑' : '–¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑–¥—ã –¥–∞–π—ã–Ω–¥–∞–ø –∂–∞—Ç—ã—Ä–º—ã–∑',
            currentLanguage === 'ru' ? '–ù–∞—à–∏ –ø–æ–≤–∞—Ä–∞ –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å' : '–ë—ñ–∑–¥—ñ“£ –∞—Å–ø–∞–∑—à—ã–ª–∞—Ä –¥–∞–π—ã–Ω–¥–∞–π –±–∞—Å—Ç–∞–¥—ã'
        );
    }, 2000);
    
    // Show ready notification
    setTimeout(() => {
        updateOrderStatus('ready-to-serve');
        showOrderNotification('success',
            currentLanguage === 'ru' ? '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!' : '–¢–∞–ø—Å—ã—Ä—ã—Å –¥–∞–π—ã–Ω!',
            currentLanguage === 'ru' ? '–ú–æ–∂–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑' : '–¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑–¥—ã –∞–ª–∞ –∞–ª–∞—Å—ã–∑'
        );
        
        // Clear order after 5 minutes
        setTimeout(() => {
            localStorage.removeItem(`order_table_${tableNumber}`);
            updateOrderStatus('ready');
        }, 5 * 60 * 1000);
        
    }, totalTime * 1000); // Convert minutes to milliseconds
}

function updateOrderStatus(status) {
    orderStatus = status;
    const statusElement = document.getElementById('orderStatus');
    const statusText = orderStatuses[currentLanguage][status];
    
    statusElement.innerHTML = `
        <i class="fas fa-${getStatusIcon(status)}"></i>
        ${statusText}
    `;
    
    statusElement.className = `order-status ${status}`;
}

function getStatusIcon(status) {
    const icons = {
        'ready': 'check-circle',
        'ordering': 'clock',
        'cooking': 'fire',
        'ready-to-serve': 'bell'
    };
    return icons[status] || 'clock';
}

function checkOrderStatus() {
    const savedOrder = localStorage.getItem(`order_table_${tableNumber}`);
    if (savedOrder) {
        const order = JSON.parse(savedOrder);
        const elapsed = (new Date() - new Date(order.timestamp)) / 1000 / 60; // minutes
        
        if (elapsed >= order.estimatedTime) {
            updateOrderStatus('ready-to-serve');
        } else {
            updateOrderStatus('cooking');
            // Continue simulation for remaining time
            const remainingTime = order.estimatedTime - elapsed;
            setTimeout(() => {
                updateOrderStatus('ready-to-serve');
            }, remainingTime * 60 * 1000);
        }
    }
}

function showOrderNotification(type, title, message) {
    const container = document.getElementById('orderNotifications');
    
    const notification = document.createElement('div');
    notification.className = `order-notification ${type}`;
    
    const icons = {
        success: '‚úÖ',
        warning: '‚ö†Ô∏è',
        cooking: 'üë®‚Äçüç≥'
    };
    
    notification.innerHTML = `
        <div class="order-notification-icon">${icons[type] || '‚ÑπÔ∏è'}</div>
        <div>
            <div style="font-weight: 600; margin-bottom: 4px;">${title}</div>
            <div style="font-size: 0.9rem; opacity: 0.9;">${message}</div>
        </div>
    `;
    
    container.appendChild(notification);
    
    // Auto remove after 8 seconds
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.animation = 'fadeOut 0.3s ease-out';
            setTimeout(() => notification.remove(), 300);
        }
    }, 8000);
}

// Language functions
function toggleLanguage() {
    currentLanguage = currentLanguage === 'ru' ? 'kz' : 'ru';
    updateLanguage();
    
    // Update language toggle button
    const langToggle = document.getElementById('langToggle');
    const span = langToggle.querySelector('span');
    span.textContent = currentLanguage === 'ru' ? '“ö–∞–∑–∞“õ—à–∞' : '–†—É—Å—Å–∫–∏–π';
    
    // Reload dynamic content
    loadMenuCategory(currentCategory);
    if (selectedAgeGroup) {
        showPersonalRecommendations();
    }
    updateOrderStatus(orderStatus);
}

function updateLanguage() {
    document.querySelectorAll('[data-ru]').forEach(element => {
        const ruText = element.getAttribute('data-ru');
        const kzText = element.getAttribute('data-kz');
        
        if (currentLanguage === 'kz' && kzText) {
            element.textContent = kzText;
        } else if (ruText) {
            element.textContent = ruText;
        }
    });
}

// Notification system (reuse from main app)
function showNotification(type, title, message, duration = 4000) {
    const container = document.querySelector('.notification-container') || 
                    document.getElementById('orderNotifications');
    
    const notification = document.createElement('div');
    notification.className = `order-notification ${type}`;
    
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è'
    };
    
    notification.innerHTML = `
        <div class="order-notification-icon">${icons[type] || '‚ÑπÔ∏è'}</div>
        <div>
            <div style="font-weight: 600; margin-bottom: 4px;">${title}</div>
            <div style="font-size: 0.9rem; opacity: 0.9;">${message}</div>
        </div>
    `;
    
    container.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.animation = 'fadeOut 0.3s ease-out';
            setTimeout(() => notification.remove(), 300);
        }
    }, duration);
}

// Load saved preferences on page load
window.addEventListener('load', function() {
    const savedAge = localStorage.getItem(`agePreference_table_${tableNumber}`);
    if (savedAge) {
        selectedAgeGroup = savedAge;
        showPersonalRecommendations();
        
        // Hide the banner
        document.querySelector('.recommendations-banner').style.display = 'none';
    }
});
